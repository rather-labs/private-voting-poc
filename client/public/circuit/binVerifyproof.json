{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":3297643635501165203,"abi":{"parameters":[{"name":"verification_key","type":{"kind":"array","length":128,"type":{"kind":"field"}},"visibility":"private"},{"name":"proof","type":{"kind":"array","length":456,"type":{"kind":"field"}},"visibility":"private"},{"name":"public_inputs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"tY9LCsMgFEX38sYOYpI2rVspJfgNgqj4KRRx7zUhKYGOOzz33nfgFRCS5WXWVrkI5FHAOE6TdrZRgW6Loqd2pZhoSEAGPCKQVgAZL31FoLSRQK64op8pnrpu3+LpNnzH/b0+EeA/2huwoI3Ry3z+qMUvGjRlRu6osuWnNr390Rz3PjguRQ5yNW1d038A","file_map":{"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"\nuse dep::std;\n\nglobal HONK_VK_SIZE: u32 = 128;\nglobal HONK_PROOF_SIZE: u32 = 456;\nglobal HONK_IDENTIFIER: u32 = 1;\n\nfn main(\n    verification_key : [Field; HONK_VK_SIZE], \n    proof: [Field; HONK_PROOF_SIZE],// 93 ultraplonk | ultrahonk\n    public_inputs : [Field; 18], // 18 public inputs for each quest\n) {\n    std::verify_proof_with_type(\n        verification_key, \n        proof, \n        public_inputs, \n        0x0,\n        HONK_IDENTIFIER\n    );\n}\n","path":"/home/juanbel/Documents/Aztec/jwtvoting/client/public/circuit/binVerifyproof/src/main.nr"}},"names":["main"],"brillig_names":[]}