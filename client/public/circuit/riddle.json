{
	"noir_version": "1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a",
	"hash": 4674918420406567863,
	"abi": {
		"parameters": [
			{
				"name": "guess",
				"type": { "kind": "array", "length": 6, "type": { "kind": "field" } },
				"visibility": "private"
			}
		],
		"return_type": { "abi_type": { "kind": "field" }, "visibility": "public" },
		"error_types": {}
	},
	"bytecode": "H4sIAAAAAAAA/9VUWw7CIBCEvh+2VU+yFGjhz6vYSO9/AiOmkCD6Y1w/OsmECY/JMpClZMPZsiTvoG68uJHDJISZR8M4u8KoFyVByGVSTDGp5G1UnBsl1KwXPYNmghu2Ss1X2FAGXvAdpniCurqzqNa70zTQSaBLp/25yrK2bCzbYN4jjTKA38BSRK8K8W0OeHXBP/PLEL1qxPy6neSXI3o1iPn1iPl96g3P/+17QBfoPtAtee0Ng+XR8hT5eSTIb1Mg5jkQ3Dz93Yvg/r63pm49j9bi/R4Pd0m9UHgGAAA=",
	"debug_symbols": "3ZRBCoMwEEXvMmsXmUljqlcppUSNJRCiRC0U8e5VMSK01EWhC5d/5uUzb5MeCp1195txZdVAeunBVrlqTeXG1AObR02t3JSaVvkW0oRFoF0BKVI8RFAaqyGNcYjeSC7iBT0RW1ESH1CihBaWOBPfYeQYYOQcd2CGSYBZfN7C1wjw8Ib0P0O53kGS852jpQzFKBPxiyE/vOHp8Ibi4IZjyLyx1txv2x92HD+UNyqzeoll5/LNtn3WYRPe177KddF5PTXNu7H+BQ==",
	"file_map": {
		"25": {
			"source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
			"path": "std/hash/poseidon2.nr"
		},
		"61": {
			"source": "use std::hash::poseidon2;\n\nfn main(guess: [Field; 6]) -> pub Field {\n    let guess_hash = poseidon2::Poseidon2::hash(guess, 6);\n    guess_hash\n}\n\n",
			"path": "/home/juanbel/Documents/Aztec/jwtvoting/voting-quest-evm/circuit/riddle/src/main.nr"
		}
	},
	"names": ["main"],
	"brillig_names": []
}
